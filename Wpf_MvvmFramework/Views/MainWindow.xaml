<Window x:Class="Wpf_MvvmFramework.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:behaviors="clr-namespace:Wpf_MvvmFramework.Behaviors"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Wpf_MvvmFramework"
        xmlns:vm="clr-namespace:Wpf_MvvmFramework.ViewModels" 
        d:DataContext="{d:DesignInstance {x:Type vm:MainViewModel}}"
        mc:Ignorable="d"
        Title="{Binding Title}" Height="450" Width="800">

    <!--
    ## Property Path Data 바인딩 시 DataContext를 못찾을때 에 대한 설명 ##
    일반적인 WPF 뷰(Page, Window, UserControl 클래스)는 ~~~~.xaml 파일과 ~~~~.xaml.cs 파일로 구성되어 있으며,
    이 두 요소는 컴파일되어 실행되기 전인 디자인 타임(design-time)에는 서로 독립적인 요소입니다.
    따라서 디자인 타임에는 XAML 편집기가 ~~~~.xaml 파일의 코드비하인드인 ~~~~.xaml.cs에서 설정한 DataContext 정보를 알 수 없습니다.
    메인 뷰의 DataContext가 MainViewModel 클래스일 것으로 예상되지만, XAML 편집기는 이를 인지하지 못하므로
    (실제 실행 시 오류는 아니지만) DataContext에서 Title 속성을 찾을 수 없다는 디자인 타임 오류 메시지를 출력하게 됩니다.
    또한, 바인딩 관련 자동완성 기능도 정상적으로 동작하지 않게 됩니다.

    이 문제를 해결하려면 디자인 타임에 해당 뷰의 DataContext가 어떤 타입인지 XAML 편집기에 명시적으로 알려줘야 합니다.
    MainViewModel 클래스가 Wpf_MvvmFramework.ViewModels 네임스페이스에 정의되어 있다고 가정하면,
    아래와 같이 XAML에 두 줄을 추가하면 됩니다.
    xmlns:vm="clr-namespace:Wpf_MvvmFramework.ViewModels" 
    d:DataContext="{d:DesignInstance {x:Type vm:MainViewModel}}"
    
    이처럼 최상위 요소 뿐만 아니라 XAML 편집기가 타입을 추정할 수 없는 구간에 d:DataContext 속성을 적절히 지정해 주시고,
    DataTemplate을 정의할 때도 DataType속성을 명시적으로 지정해주시면 불편한 오류메시지도 사라지고 디자인 타임에서도
    바인딩 대상 속성을 인식할 수 있어 보다 편리하게 XAML 코드를 작성할 수 있습니다.
    -->
    
    <!-- 잠재 수정사항이 만든 수정코드 -->
        <!--xmlns:viewmodels="clr-namespace:Wpf_MvvmFramework.ViewModels" 
        d:DataContext="{d:DesignInstance Type=viewmodels:MainViewModel}"-->
    
    <!--메인윈도우 비하인드코드 주석 참조-->
    
    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="_File">
                <MenuItem Header="_New" />
                <MenuItem Header="_Open" />
                <MenuItem Header="_Save" />
                <Separator />
                <MenuItem Header="_Exit" />
            </MenuItem>
            <MenuItem Header="_Master">
                <MenuItem Header="_Code Management" />
                <MenuItem
                        Command="{Binding NavigateCommand}"
                        CommandParameter="Views/CustomerPage.xaml"
                        Header="C_ustomer Management" />
            </MenuItem>
        </Menu>
        <Frame NavigationUIVisibility="Hidden">
            <b:Interaction.Behaviors>
                <behaviors:FrameBehavior NavigationSource="{Binding NavigationSource, Mode=TwoWay}" />
            </b:Interaction.Behaviors>
        </Frame>
    </DockPanel>
    
</Window>
